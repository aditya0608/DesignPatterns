Can we improve multithreading?
For most Java applications, we obviously need to ensure that the Singleton works in the presence of multiple threads.
But it’s expensive to synchronize the getInstance() method, so what do we do?

Well, we have a few options...

1. Do nothing if the performance of getInstance() isn’t critical to your application.
That’s right; if calling the getInstance() method isn’t causing substantial overhead for your application,
forget about it. Synchronizing getInstance() is straightforward and effective.
 Just keep in mind that synchronizing a method can decrease performance by a factor of 100,
  so if a high-traffic part of your code begins using getInstance(), you may have to reconsider.

2. Move to an eagerly created instance rather than a lazily created one.
If your application always creates and uses an instance of the Singleton,
or the overhead of creation and runtime aspects of the Singleton isn’t onerous,
you may want to create your Singleton eagerly, like this:


Using this approach, we rely on the JVM to create the unique instance of the Singleton when the class is loaded.
The JVM guarantees that the instance will be created before any thread accesses the static uniqueInstance variable.

3. Use “double-checked locking” to reduce the use of synchronization in getInstance().
With double-checked locking, we first check to see if an instance is created, and if not, THEN we synchronize.
This way, we only synchronize the first time through, just what we want.

Let’s check out the code:


If performance is an issue in your use of the getInstance() method,
 then this method of implementing the Singleton can drastically reduce the overhead.